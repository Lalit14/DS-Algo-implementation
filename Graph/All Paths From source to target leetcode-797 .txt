void dfs(vector<vector<int>>graph,vector<int>&temp,vector<vector<int>>&ans,int curr){
        temp.push_back(curr);
        if(curr==graph.size()-1){
            ans.push_back(temp);
        } 
        else {
            for(auto x: graph[curr]){
                dfs(graph,temp,ans,x);
            }
        }
        temp.pop_back(); 
    }
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        
        vector<vector<int>>ans;
        vector<int>temp;
        dfs(graph,temp,ans,0);
        return ans;
    }