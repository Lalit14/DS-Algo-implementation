 bool helper(queue<int>&q,vector<int>&visited,vector<int>adj[],int i){
       if(visited[i]==-1){
           q.push(i);
           visited[i]=0;
       while(!q.empty()){
           int temp = q.front();
           q.pop();
           for(auto x:adj[temp])
           {
               if(visited[x]==-1){
                   visited[x]=visited[temp]^1;
                   q.push(x);
               }
               else{
                   if(visited[x]==visited[temp]){
                     return false; 
                   }
               }
           }
       }
       }
       
    return true;    
    }
public:
	bool isBipartite(int V, vector<int>adj[]){
	    vector<int>visited(V,-1);
	  queue<int >q;
	  for(int i=0;i<V;i++){
	      if(visited[i]==-1){
	      bool k=helper(q,visited,adj,i);
	      if(k==false) return false;  
	      }
	  }
	  return true;  
	}
