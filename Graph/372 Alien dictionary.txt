 void dfs(vector<int>adj[],int u,stack<int>&st,vector<bool>&vis ){
	        vis[u]=true;
	        for(auto x:adj[u]){
	            if(vis[x]==false){
	                dfs(adj,x,st,vis);
	            }
	            
	        }
	        st.push(u);
	    }
string  topoSort(vector<int>adj[],int V) {
	 vector<bool>vis(V,false);
	  stack<int>st;
 for(int v=0; v < V; v++)
    {
        if(adj[v].size())
        {
            for(auto u: adj[v])
            {
                if(vis[u] == false)
                {
                    dfs(adj, u, st, vis);
                }
            }
        }
    }
    string res;
    while(!st.empty()){
        res+=st.top()+'a';
        st.pop();
    }
	 return res;
	}
    public:
    string findOrder(string dict[], int N, int K) {
        vector<int>adj[K];
        
        for(int i=0;i<N-1;i++){
            string w1=dict[i];
            string w2=dict[i+1];
            int x=min(w1.size(),w2.size());
            for(int j=0;j<x;j++){
                if(w1[j]!=w2[j]){
                    int u=w1[j]-'a';
                    int v=w2[j]-'a';
                    adj[u].push_back(v);
                    break;
                }
            }
            
        }
        
     return topoSort(adj,K);
    }