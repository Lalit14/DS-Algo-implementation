int editDist(string str1, string str2, int m, int n) 
{ 
    // If first string is empty, the only option is to 
    // insert all characters of second string into first 
    if (m == 0) 
        return n; 
  
    // If second string is empty, the only option is to 
    // remove all characters of first string 
    if (n == 0) 
        return m; 
  
    // If last characters of two strings are same, nothing 
    // much to do. Ignore last characters and get count for 
    // remaining strings. 
    if (str1[m - 1] == str2[n - 1]) 
        return editDist(str1, str2, m - 1, n - 1); 
  
    // If last characters are not same, consider all three 
    // operations on last character of first string, recursively 
    // compute minimum cost for all three operations and take 
    // minimum of three values. 

    return 1 + min(editDist(str1, str2, m, n - 1), // Insert 
                   editDist(str1, str2, m - 1, n), // Remove 
                   editDist(str1, str2, m - 1, n - 1) // Replace 
                   ); 
} 

T.C. =3^m+3^n
S.C.= O(1)
*****************************************************************************************************************************************************  
class Solution
{
	public:
		int editDistance(string s, string t)
		{
		    int slen=s.length();
		    int tlen=t.length();
		    
		    int dp[slen+1][tlen+1];
		    for(int i=0;i<tlen+1;i++){
		        dp[0][i]=i;
		    }
		   for(int i=0;i<slen+1;i++){
		        dp[i][0]=i;
		    }
		    for(int i=1;i<slen+1;i++){
		        for(int j=1;j<tlen+1;j++){
		            if(s[i-1]==t[j-1]){
		                dp[i][j]=dp[i-1][j-1];
		            }
		            else{
		                dp[i][j]=1+min(dp[i-1][j-1],min(dp[i][j-1],dp[i-1][j]));
		            }
		        }
		    }
		   return dp[slen][tlen]; 
		}
};
T.C. =M*N
S.C.= O(M*N)
*****************************************************************************************************************************************************