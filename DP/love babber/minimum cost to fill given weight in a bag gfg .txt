
class Solution{
	public:
	int minimumCost(int cost[], int N, int W) 
	{ 
      
       int dp[N+1][W+1];
       for(int i=0;i<N+1;i++){
          dp[i][0]=0;
       }
        for(int i=1;i<W+1;i++){
          dp[0][i]=INT_MAX;
       }
     for(int i=1;i<N+1;i++){
        for(int j=1;j<W+1;j++){

       if(cost[i-1]==-1){
            dp[i][j]=INT_MAX;}

       else  if(j>=i){
            dp[i][j]=min(dp[i-1][j],cost[i-1]+dp[i][j-i]);
        }

        else{
            dp[i][j]=dp[i-1][j];
        }
       }
       }
       if(INT_MAX>dp[N][W]) return dp[N][W];
       return -1;
	} 
};

Expected Time Complexity: O(N*W)
Expected Auxiliary Space: O(N*W)
*********************\\************************\\*************
space optimized solution

int mincost (int arr[], int n, int k)
{
    int dp[k+1];
    for(int i=0;i<=k;i++) dp[i] = INT_MAX;
    dp[0] = 0;
    for(int i=1;i<=k;i++)
    {
        for(int j=1;j<=n && j<=i;j++)
        {
            if(arr[j-1]!=-1&&dp[i-j]!=INT_MAX)
            dp[i] = min(dp[i],arr[j-1]+dp[i-j]);
        }
    }
    return (dp[k]!=INT_MAX)?dp[k]:-1;
}