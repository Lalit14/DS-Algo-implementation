brute force approach :
arr[]: 3,4,7,2,-3,1,4,2   with sum=4
for(){
	for(){
		inside it we calculate sum of each 		subarray which also takes O(N)  
		}}
T.C.= O(N^3);
S.C.=O(N);

better approach :
            i      j 
arr[]: 3,4, 7, 2,-3  , 1, 4,  2   with sum=4
       3 7 |<------>|  14  18 20 

	sum[i,j]=LS[j]-LS[i-1];
        if(i==0)
	then sum[i,j]=LS[j];
BESt approach :

   int subarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> counter;
        int cur_sum = 0;
        int ans = 0;
        counter[0] = 1;
        for (int i=0; i<nums.size(); i++) {
            cur_sum += nums[i];
            if (counter.find(cur_sum-k) != counter.end()) {
                ans += counter[cur_sum-k];
            }
            counter[cur_sum]++;
        }
        return ans;
    }
T.C.= O(N);
S.C.=O(N);