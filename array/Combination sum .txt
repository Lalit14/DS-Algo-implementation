void combination_util(vector<vector<int>>&res,vector<int>&comb,vector<int>candidates,int target,int start){
        if(target==0){
            res.push_back(comb);
        }
        for(int i=start;i<candidates.size() && candidates[i]<=target ;i++){
        comb.push_back(candidates[i]);
            combination_util(res,comb,candidates,target-candidates[i],i);
        comb.pop_back();
        }
        
        
        
    }
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
       vector<int>comb;
        sort(candidates.begin(),candidates.end());
        vector<vector<int>>res;
        combination_util(res,comb,candidates,target,0);
        
        return res;
        
    }