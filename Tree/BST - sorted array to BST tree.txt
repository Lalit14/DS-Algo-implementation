
time beats 35 %  , space 17.12% 
leetcode

TreeNode* sortedArrayToBST(vector<int>& nums) {
      
        if(nums.size()==0) return NULL;
        if(nums.size()==1) return new TreeNode(nums[0]);
     
        int middle=nums.size()/2;
        TreeNode* root=new TreeNode(nums[middle]);
        
        vector<int> v1(nums.begin(),nums.begin()+middle);
        vector<int>v2(nums.begin()+middle+1,nums.end());
  
        root->left=sortedArrayToBST(v1);
        root->right=sortedArrayToBST(v2);

        return root;
    
    }


beats 98% memory 97%

   TreeNode* helper(vector<int>& nums, int l, int r){
        if(l>r) return NULL;
        int mid = (l+r)/2;
        TreeNode* node = new TreeNode(nums[mid]);
        node->left = helper(nums, l, mid-1);
        node->right = helper(nums, mid+1, r);
        return node;
    }
    
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return helper(nums, 0, nums.size()-1);
    }
};