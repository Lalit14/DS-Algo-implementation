    bool areIsomorphic(string str1, string str2)
    {
        int n=str1.size();
        int m=str2.size();
        if(n!=m) return false;
        
        char map1[256]={0};
        char map2[256]={0};
        for(int i=0;i<n;i++){
            if(!map1[str1[i]] && !map2[str2[i]]){
            map1[str1[i]]=str2[i];
            map2[str2[i]]=str1[i];}
            else if(map1[str1[i]]!=str2[i]) return false;
            
        }
        
       return true;
    }


Input:
str1 = aab
str2 = xxy
Output: 1



Given two strings 'str1' and 'str2', check if these two strings are isomorphic to each other.
Two strings str1 and str2 are called isomorphic if there is a one to one mapping possible for every character of str1 to every character of str2 while preserving the order.
Note: All occurrences of every character in ‘str1’ should map to the same character in ‘str2’

Example 1:

Input:
str1 = aab
str2 = xxy
Output: true

Input:
str1 = aab
str2 = xyz
Output: false


*************************editorial ans ****************
bool areIsomorphic(string str1, string str2)
    {
        
        int m = str1.length(), n = str2.length();
        
        // Length of both strings must be same for one to one
        // corresponance
        if (m != n)
            return false;
        
        // To mark visited characters in str2
        bool marked[MAX_CHARS] = {false};
        
        // To store mapping of every character from str1 to
        // that of str2. Initialize all entries of map as -1.
        int map[MAX_CHARS];
        memset(map, -1, sizeof(map));
        
        // Process all characters one by on
        for (int i = 0; i < n; i++)
        {
            // If current character of str1 is seen first
            // time in it.
            if (map[str1[i]] == -1)
            {
                // If current character of str2 is already
                // seen, one to one mapping not possible
                if (marked[str2[i]] == true)
                    return false;
                
                // Mark current character of str2 as visited
                marked[str2[i]] = true;
                
                // Store mapping of current characters
                map[str1[i]] = str2[i];
            }
            
            // If this is not first appearance of current
            // character in str1, then check if previous
            // appearance mapped to same character of str2
            else if (map[str1[i]] != str2[i])
                return false;
        }
        
        return true;
    }
