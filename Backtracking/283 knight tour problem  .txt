#include <iostream>
using namespace std;
#define N 8
void printSolution(int sol[N][N])
{
    for (int x = 0; x < N; x++) {
        for (int y = 0; y < N; y++)
            cout << " " << sol[x][y] << " ";
        cout << endl;
    }
}

int isSafe(int x, int y, int arr[N][N])
{
    return (x >= 0 && x < N && y >= 0 && y < N
            && arr[x][y] == -1);
}
int helper(int arr[N][N],int x_move[N],int y_move[N],int x,int y,int pos){
    if(pos==N*N) return 1;
    int new_x;
    int new_y;
    for(int i=0;i<8;i++){
        new_x=x_move[i]+x;
        new_y=y_move[i]+y;
        if(isSafe(new_y,new_y,arr)){
            arr[new_x][new_y]=pos;
            if(helper(arr,x_move,y_move,new_x,new_y,pos+1)==1) return 1;
            else arr[new_x][new_y]=-1;
            
        }
        
        
    }
    
    
    
    
    
  return 0;
  
}



int Knight_fun(){
    int arr[N][N];
    
    for(int i=0;i<N;i++){
        for(int j=0;j<N;j++){
            arr[i][j]=-1;
            
        }
    }
    int x_move[8]={-2,-1,1,2,-2,-1,1,2};
    int y_move[8]={-1,-2,-2,-1,1,2,2,1};
    arr[0][0]=0;
    if(helper(arr,x_move,y_move,0,0,1)==0) {
        cout<<"no result"<<endl;
        return 0;
    }
    else{
    printSolution(arr);
    return 1;
    }
    
}


int main() {
int m= Knight_fun();
cout<<m<<endl;

	return 0;
}
