   TreeNode* findhelper(TreeNode* node){
        while(node->left!=NULL){
            node=node->left;
        }
        return node;
    }
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
      if(root==NULL ) return NULL;
        if(root->val>key){
           root->left= deleteNode(root->left,key);
        }
        else if(root->val<key){
            root->right=deleteNode(root->right,key);
        }
        else{
            if(root->left==NULL){
                return root->right;
            }
            else if(root->right==NULL){
                return root->left;
            }
            
        TreeNode* newNode=findhelper(root->right);
                root->val=newNode->val;
                root->right=deleteNode(root->right,root->val);
        }
       return root;



**********************************************************
  TreeNode* deleteNode(TreeNode* root, int key) {
        if (!root) return nullptr;
        if (root->val == key) {
            if (!root->right) {
                TreeNode* left = root->left;
                delete root;
                return left;
            }
            else {
                TreeNode* right = root->right;
                while (right->left)
                    right = right->left;
                swap(root->val, right->val);    
            }
        }
        root->left = deleteNode(root->left, key);
        root->right = deleteNode(root->right, key);
        return root;
************************************************************